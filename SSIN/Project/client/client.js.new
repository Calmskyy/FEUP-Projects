const axios = require('axios');
// const { SSL_OP_EPHEMERAL_RSA } = require('constants');
const crypto = require('crypto');
// const CryptoJS = require('crypto-js'); // Shared AES encryption
const Buffer = require('buffer').Buffer;
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);
const rl = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout,
});

// Global variables
let sharedKey;
console.log(sharedKey);

const askUsername = () => {
  return new Promise((resolve) => {
    rl.question('Insert username\n', (username) => {
      console.log('\n');
      resolve(username);
    });
  });
};

const askOneTimeID = () => {
  return new Promise((resolve) => {
    rl.question('Insert One Time ID\n', (oneTimeID) => {
      console.log('\n');
      resolve(oneTimeID);
    });
  });
};

const handleRegistration = async () => {
  // Ask username and onetime ID
  const username = await askUsername();
  const oneTimeID = await askOneTimeID();

  // console.log("\033[2J");

  const content = JSON.stringify({
    username: username,
    oneTimeID: oneTimeID,
  });

  await sendPost(
    content,
    '/security/register',
    'Registration succeeded',
    'Registration failed: wrong username and One Time ID combination'
  );
};

/**
 * Returns stdout of a bash command
 * Only works in UNIX-based systems
 * stderr is not being handled, beware
 * @param string command
 * @returns stdout
 */
async function getCommandOutput(command) {
  const output = await exec(command);
  return output.stdout;
}

async function serverConnectionSetup() {
  consoleWarning('Connecting to the server');
  const publicKey = await getRSAPublicKey();

  // Generate shared key
  sharedKey = await getCommandOutput('dd if=/dev/urandom bs=128 count=1');

  // encrypt gerenated key with RSA public key
  const encryptSharedKey = encryptRSA(sharedKey, publicKey);

  // send
  consoleWarning('Sending generated shared key');
  const content = JSON.stringify({
    encryptSharedKey,
  });
  sendPost(content, '/security/encryptSharedKey');
}

/**
 * Sends POST with content in JSON format.
 * Sends content in JSON format
 * @param string contentToSendJSON
 * @param string endpoint
 * @param string successMsg, not required
 * @param string errorMsg, , not required
 * @returns 0: success, 1: error, 2: context error
 */
async function sendPost(contentToSendJSON, endpoint, successMsg, errorMsg) {
  const config = {
    method: 'post',
    url: 'http://localhost:3000' + endpoint,
    headers: {
      'Content-Type': 'application/json',
    },
    data: contentToSendJSON,
  };

  const response = await axios(config);

  if (successMsg !== null && errorMsg !== null) {
    switch (response.data.status) {
      case 0:
        consoleSuccess(successMsg);
        break;
      case 1:
        consoleError(errorMsg);
        break;
      case 2:
        consoleError(errorMsg);
        break;
      default:
        console.log('Unhandled code:', response.data.status);
    }
  }

  return response;
}

/**
 * Encrypts a string with RSA public key
 * @param string toEncrypt
 * @param string publicKey
 * @returns Encrypted string
 */
function encryptRSA(toEncrypt, publicKey) {
  // const absolutePath = path.resolve(relativeOrAbsolutePathToPublicKey);
  // const publicKey = fs.readFileSync(absolutePath, 'utf8');
  const buffer = Buffer.from(toEncrypt, 'utf8');
  const encrypted = crypto.publicEncrypt(publicKey, buffer);

  return encrypted.toString('base64');
}

async function getRSAPublicKey() {
  const config = {
    method: 'get',
    url: 'http://localhost:3000/security/publicKeyRSARequest',
    headers: {},
  };

  const response = await axios(config);

  if (response.status === 200) {
    consoleSuccess('200 Receiving RSA public key');
    return response.data.publicKey;
  } else {
    console.log('Error fetching RSA public key');
  }
}

const consoleSuccess = (msg) => {
  console.log('\033[1;32m' + msg + '\033[0m');
};

const consoleWarning = (msg) => {
  console.log('\033[1;33m' + msg + '\033[0m');
};

const consoleError = (msg) => {
  console.log('\033[1;31m' + msg + '\033[0m');
};

const handleMenu = async () => {
  const askService = () => {
    console.log('1. Calculate square root');
    console.log('2. Calculate cubic root');
    console.log('3. Calculate n root');
    console.log('\n');

    return new Promise((resolve) => {
      rl.question('Select service\n', (serviceNum) => {
        console.log(serviceNum);
        resolve(serviceNum);
      });
    });
  };

  const askNumber = () => {
    return new Promise((resolve) => {
      rl.question('Enter a number\n', (number) => {
        resolve(number);
      });
    });
  };

  const askN = () => {
    return new Promise((resolve) => {
      rl.question('Enter a n root\n', (n) => {
        resolve(n);
      });
    });
  };

  const serviceNum = await askService();

  console.log(serviceNum);

  switch (serviceNum) {
    case '1': {
      const number = await askNumber();
      const response = await sendPost(JSON.stringify({ number }), '/services/squareRoot');
      consoleSuccess('Result: ' + response.data.result);
      await handleMenu();
      break;
    }
    case '2': {
      const number = await askNumber();
      const response = await sendPost(JSON.stringify({ number }), '/services/cubicRoot');
      consoleSuccess('Result: ' + response.data.result);
      await handleMenu();
      break;
    }
    case '3': {
      const number = await askNumber();
      const n = await askN();
      const response = await sendPost(JSON.stringify({ number, n }), '/services/nRoot');
      consoleSuccess('Result: ' + response.data.result);
      await handleMenu();
      break;
    }
    default:
      console.log('\033[2J');
      consoleWarning('Option ' + serviceNum + ' does not exist!\n');
      await handleMenu();
  }
};

/* ------ MAIN ------- */
const main = async () => {
  console.log('\033[2J');
  await serverConnectionSetup();

  await handleRegistration();

  await handleMenu();
};

main();
