/* Generated By:JJTree: Do not edit this line. ASTMain.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.ArrayList;
public
class ASTMain extends SimpleNode {

  int maxStack = 0;
  int currentStack = 0;
  int localLimit = 0;

  public ASTMain(int id) {
    super(id);
  }

  public ASTMain(Jmm p, int id) {
    super(p, id);
  }

  @Override
  public void analyzeSemantics(ArrayList<SymbolTable> symbolTables, ArrayList<String> errors){

    for(int i = 0; i < this.jjtGetNumChildren(); i++){

      this.jjtGetChild(i).setMethod("main");
      
      this.jjtGetChild(i).analyzeSemantics(symbolTables, errors);

    }

  }


  @Override
  public String getCode(ArrayList<SymbolTable> symbolTables, SimpleNode stackMethod){

    StringBuilder header = new StringBuilder(".method public static main([Ljava/lang/String;)V\n");

    for(int k = 0; k < symbolTables.size(); k++ ){
      if(symbolTables.get(k).getName().equals("main")){
        localLimit = symbolTables.get(k).getVariables().size() + symbolTables.get(k).getArguments().size();
      }
    } 

    StringBuilder code = new StringBuilder("");

    for(int i = 1; i < this.jjtGetNumChildren(); i++){
      this.jjtGetChild(i).setMethod("main");
      code.append(this.jjtGetChild(i).getCode(symbolTables, this));
    }

    code.append("return\n");
    code.append(".end method\n");

    StringBuilder limits = new StringBuilder("");

    String localLimitString = String.valueOf(localLimit); 

    // STACK
    limits.append(".limit stack " + maxStack + "\n");
    limits.append(".limit locals " + localLimitString + "\n");
    // limits.append(".limit stack 99\n");
    // limits.append(".limit locals 99\n");
    
    return header.toString() + limits.toString() + code.toString();

  }

  public void incStack(){
    this.currentStack++;
  }

  public void decStack(){
    this.currentStack--;
  }

  public void decStack(int i){
    this.currentStack -= i;
  }

  public void updateMaxStack(){
    if(this.currentStack > this.maxStack){
      this.maxStack = this.currentStack;
    }
  }

}
/* JavaCC - OriginalChecksum=1a9088f17f16bab1d80769de3bd68571 (do not edit this line) */
