/* Generated By:JJTree: Do not edit this line. ASTFunctionCall.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.ArrayList;
public
class ASTFunctionCall extends SimpleNode {
  public ASTFunctionCall(int id) {
    super(id);
  }

  public ASTFunctionCall(Jmm p, int id) {
    super(p, id);
  }

  @Override
  public void analyzeSemantics(ArrayList<SymbolTable> symbolTables, ArrayList<String> errors){

    for(int i = 0; i < this.jjtGetNumChildren(); i++){
      this.jjtGetChild(i).setMethod(this.getMethod());
      this.jjtGetChild(i).analyzeSemantics(symbolTables, errors);

    }
        
    SymbolTable st = null;
    for (int i = 0; i < symbolTables.size(); i++) {
      if (symbolTables.get(i).getName().equals(this.getMethod())) 
        st = symbolTables.get(i);
    }
    if (st == null)
      return;
 
    ArrayList<ArrayList<Symbol>> argumentsList = new ArrayList<ArrayList<Symbol>>();
    SimpleNode function_child = (SimpleNode) this.jjtGetChild(1);
    String function_name = "";
    function_name = function_child.getVal();
    int functionFound = 0;

    for (int i = 0; i < symbolTables.size(); i++) {
      if (symbolTables.get(i).getName().equals(function_name)) {
        ArrayList<Symbol> arguments = symbolTables.get(i).getArguments();
        argumentsList.add(arguments);
        functionFound++;
      }
    }
    for (int i = 0; i < symbolTables.size(); i++) {
      for (int j = 0; j < symbolTables.get(i).getImports().size(); j++) {
        if (symbolTables.get(i).getImports().get(j).get("methodName").get(0) != null) { // add class checking
          if (symbolTables.get(i).getImports().get(j).get("methodName").get(0).equals(function_name)) {
            ArrayList<String> args = symbolTables.get(i).getImports().get(j).get("arguments");
            ArrayList<Symbol> arguments = new ArrayList<Symbol>();
            for (int z = 0; z < args.size(); z++) {
              if (args.get(z) == "void")
                break;
              Symbol symb = new Symbol("abc", args.get(z), 0);
              arguments.add(symb);
            }
            argumentsList.add(arguments);
            functionFound++;
          }
        }
      }
    }
    if (functionFound == 0) {
      errors.add("ERROR: Function call was made to a function that doesn't exist.");
      return;
    }

    String error = "";
    boolean validFunction = false;
    for (int s = 0; s < argumentsList.size(); s++) {
      if (validFunction == true)
        break;
      validFunction = true;
      if (this.jjtGetChild(2).jjtGetNumChildren() != argumentsList.get(s).size()) {
        error = "ERROR: Function call's arguments do not match the function definition.";
        validFunction = false;
        continue;
      }
      else {
        for (int i = 0; i < argumentsList.get(s).size(); i++) {
          String argumentDefined = argumentsList.get(s).get(i).getType();
          SimpleNode argumentUsed = (SimpleNode) this.jjtGetChild(2).jjtGetChild(i);
          String argumentType = "";
          String argumentName = argumentUsed.getVal();
          boolean argumentInit = true;
          if (argumentUsed.toString().equals("ArrayAccess") || argumentUsed.toString().equals("Sub") || argumentUsed.toString().equals("Sum") || argumentUsed.toString().equals("Mult")
          || argumentUsed.toString().equals("Div") || argumentUsed.toString().equals("Dot"))
            argumentType = "Int";
          if (argumentUsed.toString().equals("And") || argumentUsed.toString().equals("Not") || argumentUsed.toString().equals("Expression"))
            argumentType = "Boolean";
          if (argumentUsed.toString().equals("FunctionCall")) {
            argumentName = argumentUsed.jjtGetChild(1).getVal();
            for (int a = 0; a < symbolTables.size(); a++) {
              if (symbolTables.get(a).getClassSpecific()) {
                for (int j = 0; j < symbolTables.get(a).getMethods().size(); j++) {
                  if (symbolTables.get(a).getMethods().get(j).getName().equals(argumentName))
                    argumentType = symbolTables.get(a).getMethods().get(j).getType();
                }
              }
            }
            if (argumentType.equals("")) { //check imports
              for (int a = 0; a < symbolTables.size(); a++) {
                for (int j = 0; j < symbolTables.get(a).getImports().size(); j++) {
                  if (symbolTables.get(a).getImports().get(j).get("methodName").get(0) != null) {
                    if (symbolTables.get(a).getImports().get(j).get("methodName").get(0).equals(argumentName)) {
                      argumentType = symbolTables.get(a).getImports().get(j).get("returnType").get(0);
                    }
                  }
                }
              }
            }
            if (argumentType.equals("")) {
              error = "ERROR: Function call includes a function that does not exist.";
              validFunction = false;
              break;
            }       
          }
          if (argumentUsed.toString().equals("Identifier")) {
            if (!st.hasVariable(argumentName)) {
              boolean missingVariable = true;
              for (int j = 0; j < symbolTables.size(); j++){ //checking if it's a field variable
                if (symbolTables.get(j).getClassSpecific()){
                  if (symbolTables.get(j).hasVariable(argumentName)){
                  missingVariable = false;
                  argumentType = symbolTables.get(j).getType(argumentName);
                  argumentInit = symbolTables.get(j).getInit(argumentName);
                  }
                }
              }
              if (missingVariable) {
              error = "ERROR: Function call includes a variable that does not exist: " + argumentName + ".";
              validFunction = false;
              break;
              }
            }
          }
          if (argumentUsed.toString().equals("Value")) {
            if (argumentUsed.getVal() == "true" || argumentUsed.getVal() == "false")
              argumentType = "Boolean";
            else
              argumentType = "Int";
          }
          for (int j = 0; j < st.getVariables().size(); j++) {
            if (argumentType.equals("") && st.getVariables().get(j).getName().equals(argumentName)) {
              argumentType = st.getVariables().get(j).getType();
              argumentInit = st.getVariables().get(j).getInit();
            }
          }
          for (int j = 0; j < st.getArguments().size(); j++) {
            if (argumentType.equals("") && st.getArguments().get(j).getName().equals(argumentName)) {
              argumentType = st.getArguments().get(j).getType();
            }   
          }
          if (argumentDefined != argumentType) {
            error = "ERROR: Type used in function call (" + argumentType + ") is different from the type defined (" + argumentDefined + ").";
            validFunction = false;
            break;
          }
          if (argumentInit == false) {
            error = "ERROR: Variable used in function call (" + argumentName + ") is not initialized.";
            validFunction = false;
            break;
          }         
        }
      }
    }
    if (validFunction == false)
      errors.add(error);
  }

  @Override
  public String getCode(ArrayList<SymbolTable> symbolTables, SimpleNode stackMethod){

    StringBuilder code = new StringBuilder("");


    SimpleNode caller = (SimpleNode) this.jjtGetChild(0);
    SimpleNode method = (SimpleNode) this.jjtGetChild(1);
    SimpleNode args = (SimpleNode) this.jjtGetChild(2);

    // ======================== Gets type of caller ========================
    if(caller.getVal() != null && caller.getVal().equals("io")){
      
      
      if(this.jjtGetChild(2).toString().equals("Args")){

        code.append(args.getCode(symbolTables, stackMethod));

      }

      code.append("invokestatic io/println(I)V\n");
      stackMethod.decStack(2);
      
    }
    else{

      int variable_index = 0;
      String variable_type = "";

      for(int i = 0; i < symbolTables.size(); i++){

        if(symbolTables.get(i).getName().equals(this.method) || symbolTables.get(i).getName().equals("global")){

          for(int j = 0; j < symbolTables.get(i).getVariables().size(); j++){

            if(symbolTables.get(i).getVariables().get(j).getName().equals(caller.getVal())){

              variable_index = j + 1;
              variable_type = symbolTables.get(i).getVariables().get(j).getType();

            }

          }

        }

      }

      if(variable_type.equals("Int")){
        code.append("iload " + variable_index + "\n");
        stackMethod.incStack();
        stackMethod.updateMaxStack();
      }
      else{
        // TO DO: add other types
        code.append("aload " + variable_index + "\n");
        stackMethod.incStack();
        stackMethod.updateMaxStack();
      }

    

    // ====================================================================

    // ======================== Gets type of Args =========================

    code.append(args.getCode(symbolTables, stackMethod));

    // ====================================================================

    // ========================   Function call   =========================

    String class_type = "";
    for(int i = 0; i < symbolTables.size(); i++){

      if(symbolTables.get(i).getName().equals(this.method) || symbolTables.get(i).getName().equals("global")){

        for(int j = 0; j < symbolTables.get(i).getVariables().size(); j++){

          if(symbolTables.get(i).getVariables().get(j).getName().equals(caller.getVal())){

            class_type = symbolTables.get(i).getVariables().get(j).getType();

          }

        }

      }

    }
    

    if(caller.toString().equals("NewClass")){
      // TO DO: Handle this
      caller = (SimpleNode) caller.jjtGetChild(0);
    }

    if(caller.getVal().equals("this")){
      for(int i = 0; i < symbolTables.size(); i++){

        if(symbolTables.get(i).getName().equals("global")){
  
          class_type = symbolTables.get(i).getClassN();
          break;
  
        }
  
      }
    }
    

    if(class_type.equals("")){
      
      
      code.append("invokestatic " + caller.getVal() + "/" + method.getVal() + "(");
      stackMethod.decStack();

      
      for(int i = 0; i < symbolTables.size(); i++){
        if(symbolTables.get(i).getName().equals("global")){
          
          for(int j = 0; j < symbolTables.get(i).getImports().size(); j++){

            if (symbolTables.get(i).getImports().get(j).get("methodName").get(0) == null){
              System.out.println("Found null");
            }
            else if(symbolTables.get(i).getImports().get(j).get("methodName").get(0).toString().equals(method.getVal())){
              
              for(int k = 0; k < symbolTables.get(i).getImports().get(j).get("arguments").size(); k++){
                if(symbolTables.get(i).getImports().get(j).get("arguments").get(k).equals("Int")){
                  code.append("I");
                }
                else if(symbolTables.get(i).getImports().get(j).get("arguments").get(k).equals("Array")){
                  code.append("[I");
                }
                else if(symbolTables.get(i).getImports().get(j).get("arguments").get(k).equals("Boolean")){
                  code.append("Z");
                }
              }
              
            }
            
            
            
          }
          
        }
        stackMethod.decStack();
      }
      

      code.append(")");

      // gets the method type from the imports
      for(int i = 0; i < symbolTables.size(); i++){
        if(symbolTables.get(i).getName().equals("global")){
          for(int j = 0; j < symbolTables.get(i).getImports().size(); j++){
            
            if (symbolTables.get(i).getImports().get(j).get("methodName").get(0) == null){
              //TO DO : find out why some objects appear null
            }
            else if(symbolTables.get(i).getImports().get(j).get("methodName").get(0).toString().equals(method.getVal())){
              
              if(symbolTables.get(i).getImports().get(j).get("returnType").get(0).equals("void")){
                code.append("V");
              }
              else if(symbolTables.get(i).getImports().get(j).get("returnType").get(0).equals("Int")){
                code.append("I");
                stackMethod.incStack();
                stackMethod.updateMaxStack();
              }
              else if(symbolTables.get(i).getImports().get(j).get("returnType").get(0).equals("Boolean")){
                code.append("Z");
                stackMethod.incStack();
                stackMethod.updateMaxStack();
              }
              else if(symbolTables.get(i).getImports().get(j).get("returnType").get(0).equals("Array")){
                code.append("[I");
                stackMethod.incStack();
                stackMethod.updateMaxStack();
              }
              else{
                code.append("java/lang/Object");
                stackMethod.incStack();
                stackMethod.updateMaxStack();
              }
            }
            
          }
          
        }
        
      }
      
      





      code.append("\n");
      
      
    }
    else{
      code.append("invokevirtual " + class_type + "/" + method.getVal() + "(");
      stackMethod.decStack();
    

      // gets the method from the symbol table
      for(int i = 0; i < symbolTables.size(); i++){
        if(symbolTables.get(i).getName().equals(method.getVal())){
          for(int j = 0; j < symbolTables.get(i).getArguments().size(); j++){
            
            if(symbolTables.get(i).getArguments().get(j).getType().equals("Int")){
              code.append("I");
            }
            else if(symbolTables.get(i).getArguments().get(j).getType().equals("Array")){
              code.append("[I");
            }
            else if(symbolTables.get(i).getArguments().get(j).getType().equals("Boolean")){
              code.append("Z");
            }
            else{
              code.append("java/lang/Object");
            }

          }
        }
        stackMethod.decStack();
      }

      code.append(")");

      // gets the method type from the symbol table
      for(int i = 0; i < symbolTables.size(); i++){
        if(symbolTables.get(i).getName().equals(class_type) || symbolTables.get(i).getName().equals("global")){
          for(int j = 0; j < symbolTables.get(i).getMethods().size(); j++){
            if(symbolTables.get(i).getMethods().get(j).getName().equals(method.getVal())){
              
              if(symbolTables.get(i).getMethods().get(j).getType().equals("Int")){
                code.append("I");
                stackMethod.incStack();
                stackMethod.updateMaxStack();
              }
              else if(symbolTables.get(i).getMethods().get(j).getType().equals("Array")){
                code.append("[I");
                stackMethod.incStack();
                stackMethod.updateMaxStack();
              }
              else if(symbolTables.get(i).getMethods().get(j).getType().equals("Boolean")){
                code.append("Z");
                stackMethod.incStack();
                stackMethod.updateMaxStack();
              }
              else if(symbolTables.get(i).getMethods().get(j).getType().equals("Void")){
                code.append("V");
              }
              else{
                code.append("java/lang/Object");
                stackMethod.incStack();
                stackMethod.updateMaxStack();
              }

            }
          }
        }
      }

      code.append("\n");
    }
  }

    // ====================================================================




    return code.toString();

  }
}
/* JavaCC - OriginalChecksum=effea642afce1bfcb88b536742cf2522 (do not edit this line) */
