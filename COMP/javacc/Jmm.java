/* Jmm.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Jmm.java */
public class Jmm/*@bgen(jjtree)*/implements JmmTreeConstants, JmmConstants {/*@bgen(jjtree)*/
  protected JJTJmmState jjtree = new JJTJmmState();
   private int errors = 0;

   void reportError(ParseException e, String statement, boolean recover) {
      System.out.println("Syntatic error on " + statement + " statement.\u005cn\u005cn" + e.toString());
      errors++;

      if (recover) {
         recoverFromError();
      }

      if (errors >= 10) {
         System.out.println("Reached maximum number of errors (" + 10 +
                           "). Terminating.");
         System.exit(1);
      }
  }

   void recoverFromError() {
      Token t;
      do {
         t = getToken(1);
         if (t.kind == R_PAR)
            return;
         t = getNextToken();
      } while (t.kind != R_PAR);
  }

  final public SimpleNode ParseRoot() throws ParseException {/*@bgen(jjtree) ParseRoot */
  ASTParseRoot jjtn000 = new ASTParseRoot(JJTPARSEROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        ImportDeclaration();
      }
      ClassDeclaration();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ImportDeclaration() throws ParseException {/*@bgen(jjtree) ImportDeclaration */
                           ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
jjtn000.isStatic=true;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      t = jj_consume_token(IDENTIFIER);
jjtn000.className=t.image;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
jjtn000.methodName=t.image;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case L_PAR:{
        jj_consume_token(L_PAR);
        ParamList();
        jj_consume_token(R_PAR);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOID:
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          Type();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ParamList() throws ParseException {/*@bgen(jjtree) ParamList */
  ASTParamList jjtn000 = new ASTParamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:
      case INT:
      case BOOLEAN:
      case IDENTIFIER:{
        Type();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
          Type();
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
ASTExtends jjtn001 = new ASTExtends(JJTEXTENDS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
        try {
          Identifier();
        } catch (Throwable jjte001) {
if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  1);
                }
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(L_BRACE);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VOID:
        case INT:
        case BOOLEAN:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        MethodDeclaration();
      }
      jj_consume_token(R_BRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VarDeclaration */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Identifier();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MethodDeclaration() throws ParseException {
    if (jj_2_1(2)) {
      Method();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:{
        Main();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Method() throws ParseException {/*@bgen(jjtree) Method */
  ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      Type();
      Identifier();
      jj_consume_token(L_PAR);
      Args();
      jj_consume_token(R_PAR);
      jj_consume_token(L_BRACE);
      label_5:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_5;
        }
        VarDeclaration();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case NOT:
        case L_PAR:
        case L_BRACE:
        case IDENTIFIER:
        case INTEGER_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        Statement();
      }
      jj_consume_token(RETURN);
ASTReturn jjtn001 = new ASTReturn(JJTRETURN);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  1);
                  }
      }
      jj_consume_token(SEMICOLON);
      jj_consume_token(R_BRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Main() throws ParseException {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(L_PAR);
      jj_consume_token(STRING);
      jj_consume_token(L_BRACKET);
      jj_consume_token(R_BRACKET);
      Identifier();
      jj_consume_token(R_PAR);
      jj_consume_token(L_BRACE);
      label_7:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_7;
        }
        VarDeclaration();
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case NOT:
        case L_PAR:
        case L_BRACE:
        case IDENTIFIER:
        case INTEGER_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(R_BRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Type() throws ParseException {
    if (jj_2_4(2)) {
      jj_consume_token(INT);
      jj_consume_token(L_BRACKET);
ASTArray jjtn001 = new ASTArray(JJTARRAY);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(R_BRACKET);
      } finally {
if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
ASTBoolean jjtn002 = new ASTBoolean(JJTBOOLEAN);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(BOOLEAN);
        } finally {
if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
       }
        }
        break;
        }
      case INT:{
ASTInt jjtn003 = new ASTInt(JJTINT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
        try {
          jj_consume_token(INT);
        } finally {
if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
       }
        }
        break;
        }
      case VOID:{
ASTVoid jjtn004 = new ASTVoid(JJTVOID);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
        try {
          jj_consume_token(VOID);
        } finally {
if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
       }
        }
        break;
        }
      case IDENTIFIER:{
        Identifier();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case L_BRACE:{
      jj_consume_token(L_BRACE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case NOT:
        case L_PAR:
        case L_BRACE:
        case IDENTIFIER:
        case INTEGER_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        Statement();
      }
      jj_consume_token(R_BRACE);
      break;
      }
    case IF:{
      try {
        If();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          Else();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
      } catch (ParseException e) {
reportError(e, "IF", false);
      }
      break;
      }
    case WHILE:{
      While();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_5(2)) {
        Assign();
        jj_consume_token(SEMICOLON);
      } else if (jj_2_6(2)) {
        Expression();
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void While() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(L_PAR);
      try {
        Expression();
      } catch (ParseException e) {
reportError(e, "WHILE", true);
      }
      jj_consume_token(R_PAR);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Assign() throws ParseException {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(2)) {
        Identifier();
        jj_consume_token(ASSIGN);
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          ArrayAccess();
          jj_consume_token(ASSIGN);
          Expression();
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void If() throws ParseException {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(L_PAR);
      Expression();
      jj_consume_token(R_PAR);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Else() throws ParseException {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case THIS:
    case INTEGER_LITERAL:{
      Value();
      AuxExpression();
      break;
      }
    case IDENTIFIER:{
      Identifier();
      AuxExpression();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      if (jj_2_8(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(L_BRACKET);
        Expression();
ASTNewArray jjtn001 = new ASTNewArray(JJTNEWARRAY);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(R_BRACKET);
        } finally {
if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001,  1);
                                                         }
        }
        AuxExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:{
          jj_consume_token(NEW);
ASTNewClass jjtn002 = new ASTNewClass(JJTNEWCLASS);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
          try {
            Identifier();
          } catch (Throwable jjte002) {
if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte002;}
             }
             if (jjte002 instanceof ParseException) {
               {if (true) throw (ParseException)jjte002;}
             }
             {if (true) throw (Error)jjte002;}
          } finally {
if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  1);
             }
          }
          jj_consume_token(L_PAR);
          jj_consume_token(R_PAR);
          AuxExpression();
          break;
          }
        case NOT:{
          jj_consume_token(NOT);
ASTNot jjtn003 = new ASTNot(JJTNOT);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
          try {
            Expression();
          } catch (Throwable jjte003) {
if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte003;}
             }
             if (jjte003 instanceof ParseException) {
               {if (true) throw (ParseException)jjte003;}
             }
             {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  1);
             }
          }
          AuxExpression();
          break;
          }
        case L_PAR:{
          jj_consume_token(L_PAR);
          Expression();
          jj_consume_token(R_PAR);
          AuxExpression();
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void AuxExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:
    case LESSTHAN:
    case SUM:
    case SUB:
    case MULT:
    case DIV:{
      Operator();
      AuxExpression();
      break;
      }
    case L_BRACKET:{
      jj_consume_token(L_BRACKET);
      Expression();
ASTArrayAccess jjtn001 = new ASTArrayAccess(JJTARRAYACCESS);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(R_BRACKET);
      } finally {
if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
      }
      AuxExpression();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_9(2)) {
        jj_consume_token(DOT);
ASTDot jjtn003 = new ASTDot(JJTDOT);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
        try {
ASTLength jjtn002 = new ASTLength(JJTLENGTH);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(LENGTH);
          } finally {
if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
          }
        } finally {
if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
                          }
        }
        AuxExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:{
          jj_consume_token(DOT);
          Identifier();
          jj_consume_token(L_PAR);
          Args();
ASTFunctionCall jjtn004 = new ASTFunctionCall(JJTFUNCTIONCALL);
                                         boolean jjtc004 = true;
                                         jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(R_PAR);
          } finally {
if (jjtc004) {
                                           jjtree.closeNodeScope(jjtn004,  3);
                                         }
          }
          AuxExpression();
          break;
          }
        default:
          jj_la1[21] = jj_gen;

        }
      }
    }
  }

  final public void ArrayAccess() throws ParseException {/*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(L_BRACKET);
      Expression();
      jj_consume_token(R_BRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Value() throws ParseException {/*@bgen(jjtree) Value */
               ASTValue jjtn000 = new ASTValue(JJTVALUE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        t = jj_consume_token(INTEGER_LITERAL);
        break;
        }
      case TRUE:{
        t = jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        t = jj_consume_token(FALSE);
        break;
        }
      case THIS:{
        t = jj_consume_token(THIS);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
jjtn000.val = t.image;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
ASTAnd jjtn001 = new ASTAnd(JJTAND);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
      }
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      if (jj_2_10(2147483647)) {
        jj_consume_token(LESSTHAN);
ASTLess jjtn002 = new ASTLess(JJTLESS);
                                                                        boolean jjtc002 = true;
                                                                        jjtree.openNodeScope(jjtn002);
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case INTEGER_LITERAL:{
            Value();
            break;
            }
          case IDENTIFIER:{
            Identifier();
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte002) {
if (jjtc002) {
                                                                          jjtree.clearNodeScope(jjtn002);
                                                                          jjtc002 = false;
                                                                        } else {
                                                                          jjtree.popNode();
                                                                        }
                                                                        if (jjte002 instanceof RuntimeException) {
                                                                          {if (true) throw (RuntimeException)jjte002;}
                                                                        }
                                                                        if (jjte002 instanceof ParseException) {
                                                                          {if (true) throw (ParseException)jjte002;}
                                                                        }
                                                                        {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                                        }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LESSTHAN:{
          jj_consume_token(LESSTHAN);
ASTLess jjtn003 = new ASTLess(JJTLESS);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
          try {
            Expression();
          } catch (Throwable jjte003) {
if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
          } finally {
if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
          }
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          if (jj_2_11(2147483647)) {
            jj_consume_token(SUM);
ASTSum jjtn004 = new ASTSum(JJTSUM);
                                                                             boolean jjtc004 = true;
                                                                             jjtree.openNodeScope(jjtn004);
            try {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case TRUE:
              case FALSE:
              case THIS:
              case INTEGER_LITERAL:{
                Value();
                break;
                }
              case IDENTIFIER:{
                Identifier();
                break;
                }
              default:
                jj_la1[24] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            } catch (Throwable jjte004) {
if (jjtc004) {
                                                                               jjtree.clearNodeScope(jjtn004);
                                                                               jjtc004 = false;
                                                                             } else {
                                                                               jjtree.popNode();
                                                                             }
                                                                             if (jjte004 instanceof RuntimeException) {
                                                                               {if (true) throw (RuntimeException)jjte004;}
                                                                             }
                                                                             if (jjte004 instanceof ParseException) {
                                                                               {if (true) throw (ParseException)jjte004;}
                                                                             }
                                                                             {if (true) throw (Error)jjte004;}
            } finally {
if (jjtc004) {
                                                                               jjtree.closeNodeScope(jjtn004,  2);
                                                                             }
            }
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case SUM:{
              jj_consume_token(SUM);
ASTSum jjtn005 = new ASTSum(JJTSUM);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
              try {
                Expression();
              } catch (Throwable jjte005) {
if (jjtc005) {
               jjtree.clearNodeScope(jjtn005);
               jjtc005 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte005 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte005;}
             }
             if (jjte005 instanceof ParseException) {
               {if (true) throw (ParseException)jjte005;}
             }
             {if (true) throw (Error)jjte005;}
              } finally {
if (jjtc005) {
               jjtree.closeNodeScope(jjtn005,  2);
             }
              }
              break;
              }
            default:
              jj_la1[30] = jj_gen;
              if (jj_2_12(2147483647)) {
                jj_consume_token(SUB);
ASTSub jjtn006 = new ASTSub(JJTSUB);
                                                                             boolean jjtc006 = true;
                                                                             jjtree.openNodeScope(jjtn006);
                try {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case TRUE:
                  case FALSE:
                  case THIS:
                  case INTEGER_LITERAL:{
                    Value();
                    break;
                    }
                  case IDENTIFIER:{
                    Identifier();
                    break;
                    }
                  default:
                    jj_la1[25] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                } catch (Throwable jjte006) {
if (jjtc006) {
                                                                               jjtree.clearNodeScope(jjtn006);
                                                                               jjtc006 = false;
                                                                             } else {
                                                                               jjtree.popNode();
                                                                             }
                                                                             if (jjte006 instanceof RuntimeException) {
                                                                               {if (true) throw (RuntimeException)jjte006;}
                                                                             }
                                                                             if (jjte006 instanceof ParseException) {
                                                                               {if (true) throw (ParseException)jjte006;}
                                                                             }
                                                                             {if (true) throw (Error)jjte006;}
                } finally {
if (jjtc006) {
                                                                               jjtree.closeNodeScope(jjtn006,  2);
                                                                             }
                }
              } else {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case SUB:{
                  jj_consume_token(SUB);
ASTSub jjtn007 = new ASTSub(JJTSUB);
             boolean jjtc007 = true;
             jjtree.openNodeScope(jjtn007);
                  try {
                    Expression();
                  } catch (Throwable jjte007) {
if (jjtc007) {
               jjtree.clearNodeScope(jjtn007);
               jjtc007 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte007 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte007;}
             }
             if (jjte007 instanceof ParseException) {
               {if (true) throw (ParseException)jjte007;}
             }
             {if (true) throw (Error)jjte007;}
                  } finally {
if (jjtc007) {
               jjtree.closeNodeScope(jjtn007,  2);
             }
                  }
                  break;
                  }
                default:
                  jj_la1[31] = jj_gen;
                  if (jj_2_13(2147483647)) {
                    jj_consume_token(MULT);
ASTMult jjtn008 = new ASTMult(JJTMULT);
                                                                               boolean jjtc008 = true;
                                                                               jjtree.openNodeScope(jjtn008);
                    try {
                      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                      case TRUE:
                      case FALSE:
                      case THIS:
                      case INTEGER_LITERAL:{
                        Value();
                        break;
                        }
                      case IDENTIFIER:{
                        Identifier();
                        break;
                        }
                      default:
                        jj_la1[26] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                      }
                    } catch (Throwable jjte008) {
if (jjtc008) {
                                                                                 jjtree.clearNodeScope(jjtn008);
                                                                                 jjtc008 = false;
                                                                               } else {
                                                                                 jjtree.popNode();
                                                                               }
                                                                               if (jjte008 instanceof RuntimeException) {
                                                                                 {if (true) throw (RuntimeException)jjte008;}
                                                                               }
                                                                               if (jjte008 instanceof ParseException) {
                                                                                 {if (true) throw (ParseException)jjte008;}
                                                                               }
                                                                               {if (true) throw (Error)jjte008;}
                    } finally {
if (jjtc008) {
                                                                                 jjtree.closeNodeScope(jjtn008,  2);
                                                                               }
                    }
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case MULT:{
                      jj_consume_token(MULT);
ASTMult jjtn009 = new ASTMult(JJTMULT);
              boolean jjtc009 = true;
              jjtree.openNodeScope(jjtn009);
                      try {
                        Expression();
                      } catch (Throwable jjte009) {
if (jjtc009) {
                jjtree.clearNodeScope(jjtn009);
                jjtc009 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte009 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte009;}
              }
              if (jjte009 instanceof ParseException) {
                {if (true) throw (ParseException)jjte009;}
              }
              {if (true) throw (Error)jjte009;}
                      } finally {
if (jjtc009) {
                jjtree.closeNodeScope(jjtn009,  2);
              }
                      }
                      break;
                      }
                    default:
                      jj_la1[32] = jj_gen;
                      if (jj_2_14(2147483647)) {
                        jj_consume_token(DIV);
ASTDiv jjtn010 = new ASTDiv(JJTDIV);
                                                                             boolean jjtc010 = true;
                                                                             jjtree.openNodeScope(jjtn010);
                        try {
                          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                          case TRUE:
                          case FALSE:
                          case THIS:
                          case INTEGER_LITERAL:{
                            Value();
                            break;
                            }
                          case IDENTIFIER:{
                            Identifier();
                            break;
                            }
                          default:
                            jj_la1[27] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                          }
                        } catch (Throwable jjte010) {
if (jjtc010) {
                                                                               jjtree.clearNodeScope(jjtn010);
                                                                               jjtc010 = false;
                                                                             } else {
                                                                               jjtree.popNode();
                                                                             }
                                                                             if (jjte010 instanceof RuntimeException) {
                                                                               {if (true) throw (RuntimeException)jjte010;}
                                                                             }
                                                                             if (jjte010 instanceof ParseException) {
                                                                               {if (true) throw (ParseException)jjte010;}
                                                                             }
                                                                             {if (true) throw (Error)jjte010;}
                        } finally {
if (jjtc010) {
                                                                               jjtree.closeNodeScope(jjtn010,  2);
                                                                             }
                        }
                      } else {
                        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case DIV:{
                          jj_consume_token(DIV);
ASTDiv jjtn011 = new ASTDiv(JJTDIV);
             boolean jjtc011 = true;
             jjtree.openNodeScope(jjtn011);
                          try {
                            Expression();
                          } catch (Throwable jjte011) {
if (jjtc011) {
               jjtree.clearNodeScope(jjtn011);
               jjtc011 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte011 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte011;}
             }
             if (jjte011 instanceof ParseException) {
               {if (true) throw (ParseException)jjte011;}
             }
             {if (true) throw (Error)jjte011;}
                          } finally {
if (jjtc011) {
               jjtree.closeNodeScope(jjtn011,  2);
             }
                          }
                          break;
                          }
                        default:
                          jj_la1[33] = jj_gen;
                          jj_consume_token(-1);
                          throw new ParseException();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  final public void Args() throws ParseException {/*@bgen(jjtree) Args */
  ASTArgs jjtn000 = new ASTArgs(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_15(2)) {
        Type();
        Identifier();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          Type();
          Identifier();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case THIS:
        case NEW:
        case NOT:
        case L_PAR:
        case IDENTIFIER:
        case INTEGER_LITERAL:{
          Expression();
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[35] = jj_gen;
              break label_11;
            }
            jj_consume_token(COMMA);
            Expression();
          }
          break;
          }
        default:
          jj_la1[36] = jj_gen;
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;

        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
                    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
jjtn000.val = t.image;
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(MULT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(SUB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(L_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(SUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_27()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(SUM)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(LESSTHAN)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(LESSTHAN)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_27()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_16()) return true;
    if (jj_scan_token(L_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(L_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(L_PAR)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_16()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_34()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_16()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(DIV)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public JmmTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x1000,0x0,0x32000,0x0,0x0,0x32000,0x200,0x32000,0x400,0x400,0x3d40000,0x3d40000,0x32000,0x3d40000,0x80000,0x140000,0x0,0x1c00000,0x2000000,0xf8000000,0x0,0x1c00000,0x1c00000,0x1c00000,0x1c00000,0x1c00000,0x1c00000,0x8000000,0x10000000,0x20000000,0x40000000,0x80000000,0x0,0x0,0x0,0x3c00000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x400,0x800,0x4,0x200,0x800,0x0,0x800,0x0,0x0,0x4816,0x4816,0x800,0x4816,0x0,0x10,0x800,0x4800,0x6,0x41,0x400,0x4000,0x4800,0x4800,0x4800,0x4800,0x4800,0x0,0x0,0x0,0x0,0x0,0x1,0x200,0x200,0x4806,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[15];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Jmm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Jmm(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JmmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Jmm(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JmmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Jmm(JmmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JmmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
