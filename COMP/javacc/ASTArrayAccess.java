/* Generated By:JJTree: Do not edit this line. ASTArrayAccess.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.ArrayList;
public
class ASTArrayAccess extends SimpleNode {
  public ASTArrayAccess(int id) {
    super(id);
  }

  public ASTArrayAccess(Jmm p, int id) {
    super(p, id);
  }

  @Override
  public void analyzeSemantics(ArrayList<SymbolTable> symbolTables, ArrayList<String> errors){

    for(int i = 0; i < this.jjtGetNumChildren(); i++){
      this.jjtGetChild(i).setMethod(this.getMethod());
      this.jjtGetChild(i).analyzeSemantics(symbolTables, errors);
    }

    SymbolTable st = null;
    

    for(int j=0; j<symbolTables.size();j++){
      if(symbolTables.get(j).getName().equals(this.getMethod())){
        st = symbolTables.get(j);
      }
    }

    //Verify if an array access is done to an array that is defined
    SimpleNode arrayIdentifier = (SimpleNode) this.jjtGetChild(0);
    String arrayName = arrayIdentifier.getVal();
    boolean array_init = true;

    if(!st.hasVariable(arrayName)){
      boolean missingVariable = true;

      for(int i=0; i<symbolTables.size();i++){
        if(symbolTables.get(i).getClassSpecific()){
          if(symbolTables.get(i).hasVariable(arrayName)){
            missingVariable=false;
            array_init = symbolTables.get(i).getInit(arrayName);
          }
        }
      }

      if(missingVariable){
        errors.add("ERROR: Array not defined: " + arrayName + ".");
        return;
      }
    }

    // verify if it's an array that is being acessed
    if(!st.getType(arrayName).equals("Array")){
      boolean missingVariable = true;

      for(int i=0; i<symbolTables.size();i++){
        if(symbolTables.get(i).getClassSpecific()){
          if(symbolTables.get(i).hasVariable(arrayName) && symbolTables.get(i).getType(arrayName).equals("Array")){
            missingVariable=false;
            array_init = symbolTables.get(i).getInit(arrayName);
          }
        }
      }

      if(missingVariable){
        errors.add("ERROR: Array access is not done to an array: " + arrayName + ".");
        return;
      }
    }

    //verify if the index of the array access is an integer
    SimpleNode arrayIndex = (SimpleNode) this.jjtGetChild(1);
    boolean variable_init = true;
    String identifier = arrayIndex.getVal();

    if(arrayIndex.toString().equals("Identifier")){

      if(!st.getType(identifier).equals("Int")){
        boolean missingVariable = true;

        for(int i=0; i<symbolTables.size();i++){
          if(symbolTables.get(i).getClassSpecific()){
            if(symbolTables.get(i).hasVariable(identifier) && symbolTables.get(i).getType(identifier).equals("Int")){
              missingVariable=false;
              variable_init = symbolTables.get(i).getInit(identifier);
            }
          }
        }

        if(missingVariable){
          errors.add("ERROR: Array index access is not an integer: " + identifier + ".");
          return;
        }
      }
    }
    else if (arrayIndex.toString() == "Value") {
      if ((arrayIndex.getVal().equals("true") || arrayIndex.getVal().equals("false")))
        errors.add("ERROR: Array index access is not an integer: " + arrayIndex.getVal() + ".");
      return;
    }
    else if (arrayIndex.toString().equals("FunctionCall")) {
      String indexName = arrayIndex.jjtGetChild(1).getVal();
      String indexType = "";
      for (int a = 0; a < symbolTables.size(); a++) {
        if (symbolTables.get(a).getClassSpecific()) {
          for (int j = 0; j < symbolTables.get(a).getMethods().size(); j++) {
            if (symbolTables.get(a).getMethods().get(j).getName().equals(indexName))
              indexType = symbolTables.get(a).getMethods().get(j).getType();
          }
        }
      }
      if (indexType.equals("")) { //check imports
        for (int a = 0; a < symbolTables.size(); a++) {
          for (int j = 0; j < symbolTables.get(a).getImports().size(); j++) {
            if (symbolTables.get(a).getImports().get(j).get("methodName").get(0) != null) {
              if (symbolTables.get(a).getImports().get(j).get("methodName").get(0).equals(indexName)) {
                indexType = symbolTables.get(a).getImports().get(j).get("returnType").get(0);
              }
            }
          }
        }
      }
      if (indexType.equals("")) {
        errors.add("ERROR: Array access includes a function call that does not exist: " + indexName + ".");
        return;
      }       
    }
    //test if array is initialized
    if (array_init == false) {
      errors.add("ERROR: Array access is made on an uninitialized array: " + arrayName + ".");
    }
    //test if index is initialized
    if (variable_init == false) {
      errors.add("ERROR: Array access is made with an uninitialized variable: " + identifier + ".");
    }
  }

  @Override
  public String getCode(ArrayList<SymbolTable> symbolTables, SimpleNode stackMethod){

    StringBuilder code = new StringBuilder("");

    String identifier = this.jjtGetChild(0).getVal();
    String value = this.jjtGetChild(1).getVal();


    int first_variable_index = 0;

    for(int i = 0; i < symbolTables.size(); i++){

      if(symbolTables.get(i).getName().equals(this.method) || symbolTables.get(i).getName().equals("global")){

        for(int j = 0; j < symbolTables.get(i).getArguments().size(); j++){
          if(symbolTables.get(i).getArguments().get(j).getName().equals(identifier)){
            first_variable_index = j + 1;
          }
        }

        for(int j = 0; j < symbolTables.get(i).getVariables().size(); j++){

          if(symbolTables.get(i).getVariables().get(j).getName().equals(identifier)){

            if(this.method.equals("main")){
              first_variable_index = j + 1;
            }
            else{
              first_variable_index = symbolTables.get(i).getArguments().size() + j + 1;
            }

          }

        }

      }

    }


    code.append("aload " + first_variable_index + "\n");
    stackMethod.incStack();
    stackMethod.updateMaxStack();

    if(this.jjtGetChild(1).toString().equals("Identifier")){

      int second_variable_index = 0;

      for(int i = 0; i < symbolTables.size(); i++){

        if(symbolTables.get(i).getName().equals(this.method) || symbolTables.get(i).getName().equals("global")){

          for(int j = 0; j < symbolTables.get(i).getArguments().size(); j++){
            if(symbolTables.get(i).getArguments().get(j).getName().equals(value)){
              second_variable_index = j + 1;
            }
          }

          for(int j = 0; j < symbolTables.get(i).getVariables().size(); j++){

            if(symbolTables.get(i).getVariables().get(j).getName().equals(value)){

              if(this.method.equals("main")){
                second_variable_index = j + 1;
              }
              else{
                second_variable_index = symbolTables.get(i).getArguments().size() + j + 1;
              }

            }

          }

        }

      }

      code.append("iload " + second_variable_index + "\n");

    }
    else{
      code.append("bipush " + value + "\n");
      stackMethod.incStack();
      stackMethod.updateMaxStack();
    }

    code.append("iaload\n");
    stackMethod.incStack();
    stackMethod.updateMaxStack();
    
    

    return code.toString();

  }
}
/* JavaCC - OriginalChecksum=4ee2fe9842d5b1dde7f876f43c5cd3e4 (do not edit this line) */
