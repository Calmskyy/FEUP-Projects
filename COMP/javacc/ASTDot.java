/* Generated By:JJTree: Do not edit this line. ASTDot.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.ArrayList;

public
class ASTDot extends SimpleNode {
  public ASTDot(int id) {
    super(id);
  }

  public ASTDot(Jmm p, int id) {
    super(p, id);
  }

  @Override
  public void analyzeSemantics(ArrayList<SymbolTable> symbolTables, ArrayList<String> errors){

    for(int i = 0; i < this.jjtGetNumChildren(); i++){
      
      this.jjtGetChild(i).analyzeSemantics(symbolTables, errors);
    }

    SymbolTable st = null;
    for (int i = 0; i < symbolTables.size(); i++) {
      if (symbolTables.get(i).getName().equals(this.getMethod())) 
        st = symbolTables.get(i);
    }
    if (st == null)
      return;

    SimpleNode operand = (SimpleNode) this.jjtGetChild(0);
    String operand_name = "";
    String operand_type = "";
    boolean array_init = true;
    if (operand.toString().equals("Identifier")) {
      operand_name = operand.getVal();
    if (!st.hasVariable(operand_name)) {
        boolean missingVariable = true;
        for (int i = 0; i < symbolTables.size(); i++){ //checking if it's a field variable
          if (symbolTables.get(i).getClassSpecific()){
            if (symbolTables.get(i).hasVariable(operand_name)){
              missingVariable = false;
              operand_type = symbolTables.get(i).getType(operand_name);
              array_init = symbolTables.get(i).getInit(operand_name);
            }
          }
        }

        if (missingVariable){
          errors.add("ERROR: Length includes a variable that does not exist: " + operand_name + ".");
          return;
        }
      }
    }
    else if (operand.toString().equals("FunctionCall")) {
      operand_name = operand.jjtGetChild(1).getVal();
      for (int a = 0; a < symbolTables.size(); a++) {
        if (symbolTables.get(a).getClassSpecific()) {
          for (int j = 0; j < symbolTables.get(a).getMethods().size(); j++) {
            if (symbolTables.get(a).getMethods().get(j).getName().equals(operand_name))
              operand_type = symbolTables.get(a).getMethods().get(j).getType();
          }
        }
      }
      if (operand_type.equals("")) { //check imports
        for (int a = 0; a < symbolTables.size(); a++) {
          for (int j = 0; j < symbolTables.get(a).getImports().size(); j++) {
            if (symbolTables.get(a).getImports().get(j).get("methodName").get(0) != null) {
              if (symbolTables.get(a).getImports().get(j).get("methodName").get(0).equals(operand_name)) {
                operand_type = symbolTables.get(a).getImports().get(j).get("returnType").get(0);
              }
            }
          }
        }
      }
      if (operand_type.equals("")) {
        errors.add("ERROR: Array access includes a function call that does not exist: " + operand_name + ".");
        return;
      }       
    }
    for (int j = 0; j < st.getVariables().size(); j++) {
      if (operand_type.equals("") && st.getVariables().get(j).getName().equals(operand_name)) {
        operand_type = st.getVariables().get(j).getType();
        array_init = st.getVariables().get(j).getInit();
      }
    }
    for (int j = 0; j < st.getArguments().size(); j++) {
      if (operand_type.equals("") && st.getArguments().get(j).getName().equals(operand_name)) {
        operand_type = st.getArguments().get(j).getType();
      }
    }
    if (!operand_type.equals("Array")){
      errors.add("ERROR: Length can only be used on an array.");
      return;
    }
    //test if array is initialized
    if (array_init == false) {
      errors.add("ERROR: Length is used on an uninitialized array: " + operand_name + ".");
    }    
  }

  @Override
  public String getCode(ArrayList<SymbolTable> symbolTables, SimpleNode stackMethod){

    StringBuilder code = new StringBuilder("");

    SimpleNode first_child = (SimpleNode) this.jjtGetChild(0);
    SimpleNode second_child = (SimpleNode) this.jjtGetChild(1);

    if(second_child.toString().equals("Length")){

      int first_variable_index = 0;

      for(int i = 0; i < symbolTables.size(); i++){

        if(symbolTables.get(i).getName().equals(this.method) || symbolTables.get(i).getName().equals("global")){

          for(int j = 0; j < symbolTables.get(i).getArguments().size(); j++){
            if(symbolTables.get(i).getArguments().get(j).getName().equals(first_child.getVal())){
              first_variable_index = j + 1;
            }
          }

          for(int j = 0; j < symbolTables.get(i).getVariables().size(); j++){

            if(symbolTables.get(i).getVariables().get(j).getName().equals(first_child.getVal())){

              if(this.method.equals("main")){
                first_variable_index = j + 1;
              }
              else{
                first_variable_index = symbolTables.get(i).getArguments().size() + j + 1;
              }

            }

          }

        }

      }

      code.append("aload " + first_variable_index + "\n");
      stackMethod.incStack();
      stackMethod.updateMaxStack();
      code.append("arraylength\n");
      stackMethod.incStack();
      stackMethod.updateMaxStack();

    }
    

    return code.toString();

  }


}
/* JavaCC - OriginalChecksum=978fc64108cecba719e7fd03068b905d (do not edit this line) */
