/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Jmm.jj */
/*@egen*/options
{
   LOOKAHEAD=1;
   STATIC = false;
              
}


PARSER_BEGIN(Jmm)

public class Jmm/*@bgen(jjtree)*/implements JmmTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTJmmState jjtree = new JJTJmmState();

/*@egen*/

   private int errors = 0;

   void reportError(ParseException e, String statement, boolean recover) {
      System.out.println("Syntatic error on " + statement + " statement.\n\n" + e.toString());
      errors++;

      if (recover) {
         recoverFromError();
      }

      if (errors >= 10) {
         System.out.println("Reached maximum number of errors (" + 10 +
                           "). Terminating.");
         System.exit(1);
      }
  }

   void recoverFromError() {
      Token t;
      do {
         t = getToken(1);
         if (t.kind == R_PAR)
            return;
         t = getNextToken();
      } while (t.kind != R_PAR);
  }


}


PARSER_END(Jmm)


SKIP:
{
   " "
   | "\r"
   | "\t"
   | "\n"
   | < "//" (~["\r", "\n" ])* (
         "\r"
        | "\n"
      ) >
   | < "/*" (~["*"])* "*"(
      (~["/"] (~["*"])* "*")* "/"
      | "/"
   ) >
}

/*reserved words*/
TOKEN:
{
   <IMPORT: "import">
   | <CLASS: "class">
   | <EXTENDS: "extends">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <STATIC: "static">
   | <VOID: "void">
   | <MAIN: "main">
   | <STRING: "String">
   | <INT: "int">
   | <BOOLEAN: "boolean">
   | <IF: "if">
   | <ELSE: "else">
   | <WHILE: "while">
   | <LENGTH: "length">
   | <TRUE: "true">
   | <FALSE: "false">
   | <THIS: "this">
   | <NEW: "new">
}

/*operators*/
TOKEN: {
   < ASSIGN : "=">
   | < AND : "&&">
   | < LESSTHAN : "<">
   | < SUM : "+">
   | < SUB : "-">
   | < MULT : "*">
   | < DIV : "/">
   | < NOT : "!">
}

/*delimiters*/
TOKEN:
{
   < L_PAR : "(">
   | < R_PAR : ")">
   | < L_BRACE : "{">
   | < R_BRACE : "}">
   | < L_BRACKET : "[">
   | < R_BRACKET : "]">
   | < SEMICOLON : ";">
   | < COMMA : ",">
   | < DOT : ".">
}

/*identifier*/
TOKEN:
{
   < IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* > 
   | < #LETTER : ["$", "_", "a"-"z", "A"-"Z"] > 
   | < #DIGIT : ["0"-"9"] >
}

/*integer literal*/
TOKEN:
{
   < INTEGER_LITERAL : <DECIMAL> | <OCTAL> | <HEXADECIMAL> | <BINARY> >
   | < DECIMAL: ["1"-"9"](["0"-"9"])* >
   | < #OCTAL: "0"(["0"-"7"])* >
   | < #HEXADECIMAL: ("0x" | "0X")(["0"-"9", "A"-"F", "a"-"f"])+ >
   | < #BINARY: ("0b" | "0B")(["0", "1"])+ >
}


SimpleNode ParseRoot(): {/*@bgen(jjtree) ParseRoot */
  ASTParseRoot jjtn000 = new ASTParseRoot(JJTPARSEROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ParseRoot */
   try {
/*@egen*/
   (ImportDeclaration())* ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                    }
/*@egen*/  {return jjtn000;}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ImportDeclaration(): {/*@bgen(jjtree) ImportDeclaration */
                           ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) ImportDeclaration */
   try {
/*@egen*/
   <IMPORT> [<STATIC> {jjtn000.isStatic=true;}] t=<IDENTIFIER>{jjtn000.className=t.image;} [<DOT> t=<IDENTIFIER>{jjtn000.methodName=t.image;}] [<L_PAR> ParamList() <R_PAR> (Type())?] <SEMICOLON>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ParamList(): {/*@bgen(jjtree) ParamList */
  ASTParamList jjtn000 = new ASTParamList(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ParamList */
   try {
/*@egen*/
   [Type() (<COMMA> Type())*]/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ClassDeclaration(): {/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ClassDeclaration */
   try {
/*@egen*/
   <CLASS> 
   Identifier() 
   (<EXTENDS>/*@bgen(jjtree) #Extends( 1) */
              {
                ASTExtends jjtn001 = new ASTExtends(JJTEXTENDS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  1);
                }
              }
/*@egen*/            )? 
   <L_BRACE>
      (VarDeclaration())*
      (MethodDeclaration())*
   <R_BRACE>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void VarDeclaration(): {/*@bgen(jjtree) VarDeclaration */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) VarDeclaration */
   try {
/*@egen*/
   Type() Identifier() <SEMICOLON>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void MethodDeclaration()      : {}{
   LOOKAHEAD(2) Method() | Main()
}

void Method(): {/*@bgen(jjtree) Method */
  ASTMethod jjtn000 = new ASTMethod(JJTMETHOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Method */
   try {
/*@egen*/
   <PUBLIC> Type() Identifier() <L_PAR> Args() <R_PAR> <L_BRACE>
      (LOOKAHEAD(2) VarDeclaration())*
      (Statement())*
      (<RETURN>/*@bgen(jjtree) #Return( 1) */
                {
                  ASTReturn jjtn001 = new ASTReturn(JJTRETURN);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  1);
                  }
                }
/*@egen*/           )
      <SEMICOLON>
   <R_BRACE>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void Main(): {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Main */
   try {
/*@egen*/
   <PUBLIC> <STATIC> <VOID> <MAIN> <L_PAR> <STRING> <L_BRACKET> <R_BRACKET> Identifier() <R_PAR> <L_BRACE>
      (LOOKAHEAD(2) VarDeclaration())*
      (Statement())*
   <R_BRACE>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Type()      : {} {
   LOOKAHEAD(2) <INT> <L_BRACKET>/*@bgen(jjtree) Array */
                                  {
                                    ASTArray jjtn001 = new ASTArray(JJTARRAY);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ <R_BRACKET>/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
                                  }
/*@egen*/       
   |/*@bgen(jjtree) Boolean */
     {
       ASTBoolean jjtn002 = new ASTBoolean(JJTBOOLEAN);
       boolean jjtc002 = true;
       jjtree.openNodeScope(jjtn002);
     }
     try {
/*@egen*/ <BOOLEAN>/*@bgen(jjtree)*/
     } finally {
       if (jjtc002) {
         jjtree.closeNodeScope(jjtn002, true);
       }
     }
/*@egen*/         
   |/*@bgen(jjtree) Int */
     {
       ASTInt jjtn003 = new ASTInt(JJTINT);
       boolean jjtc003 = true;
       jjtree.openNodeScope(jjtn003);
     }
     try {
/*@egen*/ <INT>/*@bgen(jjtree)*/
     } finally {
       if (jjtc003) {
         jjtree.closeNodeScope(jjtn003, true);
       }
     }
/*@egen*/     
   |/*@bgen(jjtree) Void */
     {
       ASTVoid jjtn004 = new ASTVoid(JJTVOID);
       boolean jjtc004 = true;
       jjtree.openNodeScope(jjtn004);
     }
     try {
/*@egen*/ <VOID>/*@bgen(jjtree)*/
     } finally {
       if (jjtc004) {
         jjtree.closeNodeScope(jjtn004, true);
       }
     }
/*@egen*/      
   | Identifier()
}

void Statement()      : {} {
   (<L_BRACE> (Statement())* <R_BRACE>)
   |  (try {
         // (<IF><L_PAR> Expression()<R_PAR>  Statement() #If(2)) <ELSE> #Else Statement()
         (If() (Else())?)
      } 
      catch (ParseException e) {
         reportError(e, "IF", false);
      })
   | While()
   | LOOKAHEAD(2) Assign() <SEMICOLON> //TODO: Assign ou else n\u00e3o est\u00e3o bem definidos
   | LOOKAHEAD(2) Expression() <SEMICOLON>
}

void While(): {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) While */
   try {
/*@egen*/
   <WHILE><L_PAR>
         try {
            Expression()
         } 
         catch (ParseException e) {
            reportError(e, "WHILE", true);
         }
      <R_PAR> Statement()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Assign(): {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Assign */
   try {
/*@egen*/
   LOOKAHEAD(2) Identifier() <ASSIGN> Expression() 
   | ArrayAccess() <ASSIGN> Expression()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void If(): {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) If */
   try {
/*@egen*/
   <IF><L_PAR> Expression()<R_PAR>  Statement()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 
}

void Else(): {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Else */
   try {
/*@egen*/
   <ELSE> Statement()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Expression()      : {} {
   Value() AuxExpression()                       //TODO: not sure
   | Identifier() AuxExpression()
   | LOOKAHEAD(2) <NEW> <INT> <L_BRACKET> Expression()/*@bgen(jjtree) #NewArray( 1) */
                                                       {
                                                         ASTNewArray jjtn001 = new ASTNewArray(JJTNEWARRAY);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
                                                       }
                                                       try {
/*@egen*/ <R_BRACKET>/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001,  1);
                                                         }
                                                       }
/*@egen*/              AuxExpression()
   | <NEW>/*@bgen(jjtree) #NewClass( 1) */
           {
             ASTNewClass jjtn002 = new ASTNewClass(JJTNEWCLASS);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/ Identifier()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  1);
             }
           }
/*@egen*/              <L_PAR> <R_PAR> AuxExpression()
   | <NOT>/*@bgen(jjtree) #Not( 1) */
           {
             ASTNot jjtn003 = new ASTNot(JJTNOT);
             boolean jjtc003 = true;
             jjtree.openNodeScope(jjtn003);
           }
           try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte003) {
             if (jjtc003) {
               jjtree.clearNodeScope(jjtn003);
               jjtc003 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte003 instanceof RuntimeException) {
               throw (RuntimeException)jjte003;
             }
             if (jjte003 instanceof ParseException) {
               throw (ParseException)jjte003;
             }
             throw (Error)jjte003;
           } finally {
             if (jjtc003) {
               jjtree.closeNodeScope(jjtn003,  1);
             }
           }
/*@egen*/         AuxExpression()
   | <L_PAR> Expression() <R_PAR> AuxExpression()
}

void AuxExpression()      : {} {
   Operator() AuxExpression()
   | <L_BRACKET> Expression()/*@bgen(jjtree) #ArrayAccess( 2) */
                              {
                                ASTArrayAccess jjtn001 = new ASTArrayAccess(JJTARRAYACCESS);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                              }
                              try {
/*@egen*/ <R_BRACKET>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                }
                              }
/*@egen*/                 AuxExpression()
   | LOOKAHEAD(2) <DOT>/*@bgen(jjtree) #Dot( 2) */
                        {
                          ASTDot jjtn003 = new ASTDot(JJTDOT);
                          boolean jjtc003 = true;
                          jjtree.openNodeScope(jjtn003);
                        }
                        try {
/*@egen*/ (/*@bgen(jjtree) Length */
                         {
                           ASTLength jjtn002 = new ASTLength(JJTLENGTH);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/<LENGTH>/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/        )/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc003) {
                            jjtree.closeNodeScope(jjtn003,  2);
                          }
                        }
/*@egen*/         AuxExpression()
   | <DOT> Identifier() <L_PAR> Args()/*@bgen(jjtree) #FunctionCall( 3) */
                                       {
                                         ASTFunctionCall jjtn004 = new ASTFunctionCall(JJTFUNCTIONCALL);
                                         boolean jjtc004 = true;
                                         jjtree.openNodeScope(jjtn004);
                                       }
                                       try {
/*@egen*/ <R_PAR>/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc004) {
                                           jjtree.closeNodeScope(jjtn004,  3);
                                         }
                                       }
/*@egen*/                  AuxExpression() // TODO: tratar este Dot
   | {}
}

void ArrayAccess(): {/*@bgen(jjtree) ArrayAccess */
  ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ArrayAccess */
   try {
/*@egen*/
   Identifier() <L_BRACKET> Expression() <R_BRACKET>/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Value(): {/*@bgen(jjtree) Value */
               ASTValue jjtn000 = new ASTValue(JJTVALUE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Value */
   try {
/*@egen*/
   (t=<INTEGER_LITERAL> 
   | t=<TRUE> 
   | t=<FALSE> 
   | t=<THIS> )/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.val = t.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/  
}


void Operator()      : {} {
   <AND>/*@bgen(jjtree) #And( 2) */
         {
           ASTAnd jjtn001 = new ASTAnd(JJTAND);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/        
   | LOOKAHEAD( <LESSTHAN> (Value() | Identifier()) <AND>) <LESSTHAN>/*@bgen(jjtree) #Less( 2) */
                                                                      {
                                                                        ASTLess jjtn002 = new ASTLess(JJTLESS);
                                                                        boolean jjtc002 = true;
                                                                        jjtree.openNodeScope(jjtn002);
                                                                      }
                                                                      try {
/*@egen*/ (Value() | Identifier())/*@bgen(jjtree)*/
                                                                      } catch (Throwable jjte002) {
                                                                        if (jjtc002) {
                                                                          jjtree.clearNodeScope(jjtn002);
                                                                          jjtc002 = false;
                                                                        } else {
                                                                          jjtree.popNode();
                                                                        }
                                                                        if (jjte002 instanceof RuntimeException) {
                                                                          throw (RuntimeException)jjte002;
                                                                        }
                                                                        if (jjte002 instanceof ParseException) {
                                                                          throw (ParseException)jjte002;
                                                                        }
                                                                        throw (Error)jjte002;
                                                                      } finally {
                                                                        if (jjtc002) {
                                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                                        }
                                                                      }
/*@egen*/          
   | <LESSTHAN>/*@bgen(jjtree) #Less( 2) */
                {
                  ASTLess jjtn003 = new ASTLess(JJTLESS);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                }
                try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    throw (RuntimeException)jjte003;
                  }
                  if (jjte003 instanceof ParseException) {
                    throw (ParseException)jjte003;
                  }
                  throw (Error)jjte003;
                } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003,  2);
                  }
                }
/*@egen*/         
   | LOOKAHEAD( <SUM> (Value() | Identifier()) (<LESSTHAN> | <AND>)) <SUM>/*@bgen(jjtree) #Sum( 2) */
                                                                           {
                                                                             ASTSum jjtn004 = new ASTSum(JJTSUM);
                                                                             boolean jjtc004 = true;
                                                                             jjtree.openNodeScope(jjtn004);
                                                                           }
                                                                           try {
/*@egen*/ (Value() | Identifier())/*@bgen(jjtree)*/
                                                                           } catch (Throwable jjte004) {
                                                                             if (jjtc004) {
                                                                               jjtree.clearNodeScope(jjtn004);
                                                                               jjtc004 = false;
                                                                             } else {
                                                                               jjtree.popNode();
                                                                             }
                                                                             if (jjte004 instanceof RuntimeException) {
                                                                               throw (RuntimeException)jjte004;
                                                                             }
                                                                             if (jjte004 instanceof ParseException) {
                                                                               throw (ParseException)jjte004;
                                                                             }
                                                                             throw (Error)jjte004;
                                                                           } finally {
                                                                             if (jjtc004) {
                                                                               jjtree.closeNodeScope(jjtn004,  2);
                                                                             }
                                                                           }
/*@egen*/         
   | <SUM>/*@bgen(jjtree) #Sum( 2) */
           {
             ASTSum jjtn005 = new ASTSum(JJTSUM);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
           }
           try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte005) {
             if (jjtc005) {
               jjtree.clearNodeScope(jjtn005);
               jjtc005 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte005 instanceof RuntimeException) {
               throw (RuntimeException)jjte005;
             }
             if (jjte005 instanceof ParseException) {
               throw (ParseException)jjte005;
             }
             throw (Error)jjte005;
           } finally {
             if (jjtc005) {
               jjtree.closeNodeScope(jjtn005,  2);
             }
           }
/*@egen*/        
   | LOOKAHEAD( <SUB> (Value() | Identifier()) (<LESSTHAN> | <AND>)) <SUB>/*@bgen(jjtree) #Sub( 2) */
                                                                           {
                                                                             ASTSub jjtn006 = new ASTSub(JJTSUB);
                                                                             boolean jjtc006 = true;
                                                                             jjtree.openNodeScope(jjtn006);
                                                                           }
                                                                           try {
/*@egen*/ (Value() | Identifier())/*@bgen(jjtree)*/
                                                                           } catch (Throwable jjte006) {
                                                                             if (jjtc006) {
                                                                               jjtree.clearNodeScope(jjtn006);
                                                                               jjtc006 = false;
                                                                             } else {
                                                                               jjtree.popNode();
                                                                             }
                                                                             if (jjte006 instanceof RuntimeException) {
                                                                               throw (RuntimeException)jjte006;
                                                                             }
                                                                             if (jjte006 instanceof ParseException) {
                                                                               throw (ParseException)jjte006;
                                                                             }
                                                                             throw (Error)jjte006;
                                                                           } finally {
                                                                             if (jjtc006) {
                                                                               jjtree.closeNodeScope(jjtn006,  2);
                                                                             }
                                                                           }
/*@egen*/         
   | <SUB>/*@bgen(jjtree) #Sub( 2) */
           {
             ASTSub jjtn007 = new ASTSub(JJTSUB);
             boolean jjtc007 = true;
             jjtree.openNodeScope(jjtn007);
           }
           try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte007) {
             if (jjtc007) {
               jjtree.clearNodeScope(jjtn007);
               jjtc007 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte007 instanceof RuntimeException) {
               throw (RuntimeException)jjte007;
             }
             if (jjte007 instanceof ParseException) {
               throw (ParseException)jjte007;
             }
             throw (Error)jjte007;
           } finally {
             if (jjtc007) {
               jjtree.closeNodeScope(jjtn007,  2);
             }
           }
/*@egen*/        
   | LOOKAHEAD( <MULT> (Value() | Identifier()) (<LESSTHAN> | <AND>)) <MULT>/*@bgen(jjtree) #Mult( 2) */
                                                                             {
                                                                               ASTMult jjtn008 = new ASTMult(JJTMULT);
                                                                               boolean jjtc008 = true;
                                                                               jjtree.openNodeScope(jjtn008);
                                                                             }
                                                                             try {
/*@egen*/ (Value() | Identifier())/*@bgen(jjtree)*/
                                                                             } catch (Throwable jjte008) {
                                                                               if (jjtc008) {
                                                                                 jjtree.clearNodeScope(jjtn008);
                                                                                 jjtc008 = false;
                                                                               } else {
                                                                                 jjtree.popNode();
                                                                               }
                                                                               if (jjte008 instanceof RuntimeException) {
                                                                                 throw (RuntimeException)jjte008;
                                                                               }
                                                                               if (jjte008 instanceof ParseException) {
                                                                                 throw (ParseException)jjte008;
                                                                               }
                                                                               throw (Error)jjte008;
                                                                             } finally {
                                                                               if (jjtc008) {
                                                                                 jjtree.closeNodeScope(jjtn008,  2);
                                                                               }
                                                                             }
/*@egen*/          
   | <MULT>/*@bgen(jjtree) #Mult( 2) */
            {
              ASTMult jjtn009 = new ASTMult(JJTMULT);
              boolean jjtc009 = true;
              jjtree.openNodeScope(jjtn009);
            }
            try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
            } catch (Throwable jjte009) {
              if (jjtc009) {
                jjtree.clearNodeScope(jjtn009);
                jjtc009 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte009 instanceof RuntimeException) {
                throw (RuntimeException)jjte009;
              }
              if (jjte009 instanceof ParseException) {
                throw (ParseException)jjte009;
              }
              throw (Error)jjte009;
            } finally {
              if (jjtc009) {
                jjtree.closeNodeScope(jjtn009,  2);
              }
            }
/*@egen*/          
   | LOOKAHEAD( <DIV> (Value() | Identifier()) (<LESSTHAN> | <AND>)) <DIV>/*@bgen(jjtree) #Div( 2) */
                                                                           {
                                                                             ASTDiv jjtn010 = new ASTDiv(JJTDIV);
                                                                             boolean jjtc010 = true;
                                                                             jjtree.openNodeScope(jjtn010);
                                                                           }
                                                                           try {
/*@egen*/ (Value() | Identifier())/*@bgen(jjtree)*/
                                                                           } catch (Throwable jjte010) {
                                                                             if (jjtc010) {
                                                                               jjtree.clearNodeScope(jjtn010);
                                                                               jjtc010 = false;
                                                                             } else {
                                                                               jjtree.popNode();
                                                                             }
                                                                             if (jjte010 instanceof RuntimeException) {
                                                                               throw (RuntimeException)jjte010;
                                                                             }
                                                                             if (jjte010 instanceof ParseException) {
                                                                               throw (ParseException)jjte010;
                                                                             }
                                                                             throw (Error)jjte010;
                                                                           } finally {
                                                                             if (jjtc010) {
                                                                               jjtree.closeNodeScope(jjtn010,  2);
                                                                             }
                                                                           }
/*@egen*/         
   | <DIV>/*@bgen(jjtree) #Div( 2) */
           {
             ASTDiv jjtn011 = new ASTDiv(JJTDIV);
             boolean jjtc011 = true;
             jjtree.openNodeScope(jjtn011);
           }
           try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
           } catch (Throwable jjte011) {
             if (jjtc011) {
               jjtree.clearNodeScope(jjtn011);
               jjtc011 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte011 instanceof RuntimeException) {
               throw (RuntimeException)jjte011;
             }
             if (jjte011 instanceof ParseException) {
               throw (ParseException)jjte011;
             }
             throw (Error)jjte011;
           } finally {
             if (jjtc011) {
               jjtree.closeNodeScope(jjtn011,  2);
             }
           }
/*@egen*/         
}

void Args(): {/*@bgen(jjtree) Args */
  ASTArgs jjtn000 = new ASTArgs(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Args */
   try {
/*@egen*/
   LOOKAHEAD(2) Type() Identifier() (<COMMA> Type() Identifier())*
   | Expression() (<COMMA> Expression())*
   |/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/ {}/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Identifier(): {/*@bgen(jjtree) Identifier */
                    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Identifier */
   try {
/*@egen*/
   t=<IDENTIFIER>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
      jjtn000.val = t.image;
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}