/* Generated By:JJTree: Do not edit this line. ASTClassDeclaration.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

import java.util.ArrayList;

public
class ASTClassDeclaration extends SimpleNode {
  public ASTClassDeclaration(int id) {
    super(id);
  }

  public ASTClassDeclaration(Jmm p, int id) {
    super(p, id);
  }

  @Override
  public void analyzeSemantics(ArrayList<SymbolTable> symbolTables, ArrayList<String> errors){

    for(int i = 0; i < this.jjtGetNumChildren(); i++){
      
      this.jjtGetChild(i).analyzeSemantics(symbolTables, errors);
      

    }

  }

  @Override
  public String getCode(ArrayList<SymbolTable> symbolTables, SimpleNode stackMethod){

    StringBuilder code = new StringBuilder("");
    int i = 1;
    String invokesuper = "java/lang/Object";

    // gets class name
    if(this.jjtGetChild(0).toString().equals("Identifier")){
      code.append(".class public " + this.jjtGetChild(0).getVal() + "\n");
    }
      
    // checks for Extends 
    if(this.jjtGetNumChildren() > 1 && this.jjtGetChild(1).toString().equals("Extends")){
      code.append(".super " + this.jjtGetChild(1).jjtGetChild(0).getVal() + "\n");
      invokesuper = this.jjtGetChild(1).jjtGetChild(0).getVal();
      i++;
    }
    else{
      code.append(".super java/lang/Object\n");
    }

    code.append(".method <init>()V\n");
    code.append("aload_0\n");
    code.append("invokenonvirtual " + invokesuper + "/<init>()V\n");
    code.append("return\n");
    code.append(".end method\n");

  
    // checks for VarDeclarations and Methods
    for(; i < this.jjtGetNumChildren(); i++){

      code.append(this.jjtGetChild(i).getCode(symbolTables, stackMethod));

    }

    return code.toString();

  }

}
/* JavaCC - OriginalChecksum=1aad922f9d3e3ec08537ec988b395c3a (do not edit this line) */
