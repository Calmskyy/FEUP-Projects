/* Generated By:JJTree: Do not edit this line. ASTIf.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.ArrayList;
public
class ASTIf extends SimpleNode {
  public ASTIf(int id) {
    super(id);
  }

  public ASTIf(Jmm p, int id) {
    super(p, id);
  }

  @Override
  public void analyzeSemantics(ArrayList<SymbolTable> symbolTables, ArrayList<String> errors){

    for(int i = 0; i < this.jjtGetNumChildren(); i++){
      
      this.jjtGetChild(i).setMethod(this.getMethod());
      //this.jjtGetChild(i).setArguments(this.getArguments());
      this.jjtGetChild(i).analyzeSemantics(symbolTables, errors);

    }

    SymbolTable st = null;
      for (int i = 0; i < symbolTables.size(); i++) {
        if (symbolTables.get(i).getName().equals(this.getMethod())) 
          st = symbolTables.get(i);
      }
    if (st == null)
        return;
    SimpleNode operand = (SimpleNode) this.jjtGetChild(0);
    String operand_name = "";
    String operand_type = "";
    if (operand.toString().equals("Identifier")) {
      boolean operand_init = true;
      operand_name = operand.getVal();
      if (!st.hasVariable(operand_name)) {
          boolean missingVariable = true;
          for(int i = 0; i < symbolTables.size(); i++) { //checking if it's a field variable
            if(symbolTables.get(i).getClassSpecific()) {
              if(symbolTables.get(i).hasVariable(operand_name)){
                missingVariable = false;
                operand_type = symbolTables.get(i).getType(operand_name);
                operand_init = symbolTables.get(i).getInit(operand_name);
              }
            }
          }
          if (missingVariable) {
            errors.add("ERROR: If includes a variable that does not exist: " + operand_name + ".");
            return;
          }
      }
      else {
        operand_type = st.getType(operand_name);
        operand_init = st.getInit(operand_name);
      }
      if (operand_init == false)
        errors.add("ERROR: If condition contains an uninitialized variable: " + operand_name + ".");
      if (operand_type != "Boolean")
        errors.add("ERROR: If condition is not boolean because of a non-boolean variable: " + operand_name + ".");
      return;
    }
    if (operand.toString().equals("Not")) {
      return;
    }
    if (operand.toString().equals("Expression")) {
      return;
    }
    if (operand.toString().equals("Value")) {
      if (!(operand.getVal().equals("true") || operand.getVal().equals("false") || operand.getVal().equals("0") || operand.getVal().equals("1")))
        errors.add("ERROR: If condition is not boolean because of a non-boolean value: " + operand.getVal() + ".");
      return;
    }
    if (operand.toString().equals("Less")) {
      return;
    }
    if (operand.toString().equals("And")) {
      return;
    }
    if (operand.toString().equals("Sum") || operand.toString().equals("Sub") || operand.toString().equals("Mult") || operand.toString().equals("Div")) {
      boolean lessFound = false;
      for (int i = 1; i < this.jjtGetNumChildren(); i++) {
        SimpleNode next_child = (SimpleNode) this.jjtGetChild(i);
        if (next_child.toString().equals("Sum") || next_child.toString().equals("Sub") || next_child.toString().equals("Mult") || next_child.toString().equals("Div") || next_child.toString().equals("Dot"))
          continue;
        if (next_child.toString().equals("Less")) {
          lessFound = true;
          break;
        }
      }
      if (!lessFound)
        errors.add("ERROR: If condition does not contain a boolean expression.");
      return;
    }
    if (operand.toString() == "Dot") {
      errors.add("ERROR: If condition does not contain a boolean expression.");
      return;
    }
    if (operand.toString().equals("FunctionCall")) {
      SimpleNode second_child = (SimpleNode) operand.jjtGetChild(1);
      if (second_child.toString().equals("Identifier")) {
        String child_name = "";
        child_name = second_child.getVal();
        String method_type = "";
        for (int i = 0; i < symbolTables.size(); i++) {
          for (int j = 0; j < symbolTables.get(i).getMethods().size(); j++) {
            if (symbolTables.get(i).getMethods().get(j).getName().equals(child_name)) {
              method_type = symbolTables.get(i).getMethods().get(j).getType();
            }
          }
        }
        if (method_type.equals("")) { //check imports
          for (int i = 0; i < symbolTables.size(); i++) {
            for (int j = 0; j < symbolTables.get(i).getImports().size(); j++) {
              if (symbolTables.get(i).getImports().get(j).get("methodName").get(0) != null) {
                if (symbolTables.get(i).getImports().get(j).get("methodName").get(0).equals(child_name)) {
                  method_type = symbolTables.get(i).getImports().get(j).get("returnType").get(0);
                }
              }
            }
          }
        }
        if (method_type.equals("Int")) {
          boolean lessFound = false;
          for (int i = 1; i < this.jjtGetNumChildren(); i++) {
            SimpleNode next_child = (SimpleNode) this.jjtGetChild(i);
            if (next_child.toString().equals("Sum") || next_child.toString().equals("Sub") || next_child.toString().equals("Mult") || next_child.toString().equals("Div") || next_child.toString().equals("Dot"))
              continue;
            if (next_child.toString().equals("Less")) {
              lessFound = true;
              break;
            }
          }
          if (!lessFound)
            errors.add("ERROR: If condition does not contain a boolean expression.");
          return;
        }
        if (!method_type.equals("Boolean"))
          errors.add("ERROR: If condition does not contain a boolean expression.");
        return;
      }
    }
  errors.add("ERROR: If condition does not contain a boolean expression.");
  }

  @Override
  public String getCode(ArrayList<SymbolTable> symbolTables, SimpleNode stackMethod){

    StringBuilder code = new StringBuilder("");

    SimpleNode condition = (SimpleNode) this.jjtGetChild(0);

    SimpleNode parent = (SimpleNode) this.jjtGetParent();

    boolean IfElse = false;

    int ifIndex = parent.getIndex();

    for(int i=0; i<parent.jjtGetNumChildren();i++){
      if(parent.jjtGetChild(i) == this && parent.jjtGetChild(i+1).toString().equals("Else")){
        IfElse=true;
      }
    }

    switch (condition.toString()){
      case "Less":
        code.append(condition.jjtGetChild(0).getCode(symbolTables, stackMethod));
        code.append(condition.jjtGetChild(1).getCode(symbolTables, stackMethod));
        if(IfElse){
          code.append("if_icmpge else_" + ifIndex + "\n");
        }else{
          code.append("if_icmpge endif_" + ifIndex + "\n");
        }
      break;
      default:
      code.append("");
    }

    for(int i = 1; i < this.jjtGetNumChildren(); i++){

      code.append(this.jjtGetChild(i).getCode(symbolTables, stackMethod));

    }

    if(IfElse){
      code.append("goto endif_" +ifIndex + "\n");
    }else{
      code.append("endif_" + ifIndex + ":\n");
    }

    if(!IfElse){
      parent.incrementIndex();
    }

    return code.toString();

  }
}
/* JavaCC - OriginalChecksum=264d7705aac411fe0833d6962a13a528 (do not edit this line) */
