/* Generated By:JJTree: Do not edit this line. ASTVarDeclaration.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.ArrayList;

public
class ASTVarDeclaration extends SimpleNode {
  public ASTVarDeclaration(int id) {
    super(id);
  }

  public ASTVarDeclaration(Jmm p, int id) {
    super(p, id);
  }

  @Override
  public void analyzeSemantics(ArrayList<SymbolTable> symbolTables, ArrayList<String> errors){

    for(int i = 0; i < this.jjtGetNumChildren(); i++){
      
      this.jjtGetChild(i).analyzeSemantics(symbolTables, errors);
      
    }

    SimpleNode class_operand = (SimpleNode) this.jjtGetChild(0);
    if (class_operand.toString().equals("Int") || class_operand.toString().equals("Boolean") || class_operand.toString().equals("Array"))
      return;
    if (class_operand.toString().equals("Identifier")) {
      String class_name = class_operand.getVal();
      for (int i = 0; i < symbolTables.size(); i++) {
        for (int j = 0; j < symbolTables.get(i).getImports().size(); j++) {
          if (symbolTables.get(i).getImports().get(j).get("className").get(0) != null) {
            if (symbolTables.get(i).getImports().get(j).get("className").get(0).equals(class_name)) {
              return;
            }
          }
        }
        if (symbolTables.get(i).getClassN().equals(class_name))
          return;
      }
      errors.add("ERROR: Variable was declared with an unknown class (" + class_name + ")");
      return;
    }
    errors.add("ERROR: Variable was declared with an unknown type.");
  }

  @Override
  public String getCode(ArrayList<SymbolTable> symbolTables, SimpleNode stackMethod){

    
    StringBuilder code = new StringBuilder("");
    
    return code.toString();

  }

}
/* JavaCC - OriginalChecksum=3a97de5e1e48eafaabdb246ad3794a84 (do not edit this line) */
